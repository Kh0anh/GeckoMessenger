<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Authentication.IdentityServer</name>
    </assembly>
    <members>
        <member name="F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerAuthProviderType.UserAuthProvider">
            <summary>
            User Auth Provider - if the user is not authenticated, redirects to Identity Server for them to login
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerAuthProviderType.ServiceProvider" -->
        <member name="F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerAuthProviderType.ImpersonationProvider">
            <summary>
            Impersonation Provider - requires that the requesting service provides an access token which is used to
            authenticate the user / service
            </summary>
        </member>
        <member name="F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerAuthProviderType.ResourcePasswordFlowProvider">
            <summary>
            Resource Password Flow Provider - requires that the service using a Client ID, Secret, 
            Username and Password to authenticate.
            <see cref="!:https://tools.ietf.org/html/rfc6749#section-1.3.3"/>
            <see cref="!:https://stackoverflow.com/questions/22077487/difference-between-the-resource-owner-password-flow-and-the-client-credential"/>
            </summary>
        </member>
        <member name="F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerOpenIdAuthorizationFlowType.Hybrid">
            <summary>
            Authentication using the Hybrid Flow
            <see cref="!:http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth"/>
            </summary>
        </member>
        <member name="F:ServiceStack.Authentication.IdentityServer.Enums.IdentityServerOpenIdAuthorizationFlowType.CodeFlow">
            <summary>
            Authentication using the Authorization Code Flow
            <see cref="!:http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowSteps"/>
            </summary>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.IdentityServerAuthProvider.LoadUserAuthInfo(ServiceStack.AuthUserSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Users the Access token to request the User Info and populates the Tokens</summary>
            <param name="userSession">User Session</param>
            <param name="tokens">Tokens</param>
            <param name="authInfo">Authentication Info</param>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.IdentityServerAuthProvider.IsAuthorized(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,ServiceStack.Authenticate)">
            <summary>Determines if the User is authorized</summary>
            <param name="session">Auth Session</param>
            <param name="tokens">Auth Tokens</param>
            <param name="request">Authenticate Request</param>
            <returns>True if Authorized</returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.IdentityServerAuthProvider.RefreshSettings">
            <summary>
            Updates the settings for the Provider as these may change between requests
            </summary>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.IdentityServerAuthProvider.IsValidAccessToken(ServiceStack.Auth.IAuthTokens)">
            <summary>
            Determines if we currently have a valid Authentication token or if we have an expired Authentication token
            we will attempt to refresh it
            </summary>
            <param name="authTokens">Authentication Token</param>
            <returns>True if we have a valid access token</returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.ResourcePasswordFlowAuthProvider.GetReferrerUrl(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            Gets the Referral URL from the Request
            </summary>
            <param name="authService">Auth Service</param>
            <param name="session">Auth Session</param>
            <param name="request">Authenticate Request</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.ServiceAuthProvider.LoadUserAuthInfo(ServiceStack.AuthUserSession,ServiceStack.Auth.IAuthTokens,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Users the Access token to request the User Info and populates the Tokens</summary>
            <param name="userSession">User Session</param>
            <param name="tokens">Tokens</param>
            <param name="authInfo">Authentication Info</param>
        </member>
        <member name="T:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider">
            <summary>
            Service Stack Authentication Provider - if a User isn't Authenticated, it redirects them to an Identity Server instance
            for them to login.
            </summary>
        </member>
        <member name="P:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.AuthCodeClient">
            <summary>
            Access Token Endpoint Client - Factory property to support Unit Testing
            </summary>
        </member>
        <member name="P:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.IdTokenValidator">
            <summary>
            Json Web Id Token Validator - Factory property to support Unit Testing
            </summary>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.Authenticate(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>Authenticates the User</summary>
            <param name="authService">Authenticating Service</param>
            <param name="session">Authenticating Session</param>
            <param name="request">Authenticate Request</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.AuthenticateAsync(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>Underlying Async Authenticate method - might require to make external Http calls, hence making it Async</summary>
            <param name="authService">Authenticating Service</param>
            <param name="session">Authentication Session</param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.IsAuthorized(ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,ServiceStack.Authenticate)">
            <summary>Determines if the User is authorized</summary>
            <param name="session">Auth Session</param>
            <param name="tokens">Auth Tokens</param>
            <param name="request">Authenticate Request</param>
            <returns>True if Authorized</returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.GetReferrerUrl(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Authenticate)">
            <summary>
            Gets the Referral URL from the Request
            </summary>
            <param name="authService">Auth Service</param>
            <param name="session">Auth Session</param>
            <param name="request">Authenticate Request</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.IsInitialAuthenticateRequest(ServiceStack.Web.IRequest,ServiceStack.Auth.IAuthTokens)">
            <summary>
            Determines whether we have received an initial authentication request
            </summary>
            <param name="httpRequest">Http Request</param>
            <param name="authTokens">Auth Tokens</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.IsCallbackRequest(ServiceStack.IServiceBase,ServiceStack.Authenticate)">
            <summary>
            Determines if we have been redirected back from the Identity Server Instance
            </summary>
            <param name="authService">Authenticating Service</param>
            <param name="request">Authenticate Request</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.AuthenticateClient(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession,ServiceStack.Auth.IAuthTokens,System.String,System.String)">
            <summary>Authenticates the Client by Redirecting them to the Authorize Url Endpoint of Identity Server</summary>
            <param name="authService">Auth Service</param>
            <param name="session">Auth Session</param>
            <param name="authTokens">Auth Tokens</param>
            <param name="state">State</param>
            <param name="nonce">The nonce</param>
            <returns>Http Redirect Result</returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.ParseAuthenticateTokens(ServiceStack.Web.IRequest)">
            <summary>
            Retrieves the request tokens from either the request url fragment or the body of the request
            </summary>
            <param name="request">Http Request</param>
            <returns>Authenticate Result</returns>
        </member>
        <member name="M:ServiceStack.Authentication.IdentityServer.Providers.UserAuthProvider.Init(ServiceStack.IServiceBase,ServiceStack.Auth.IAuthSession@,ServiceStack.Authenticate)">
            <summary>Initialise the Auth Token</summary>
            <param name="authService"></param>
            <param name="session"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
    </members>
</doc>
